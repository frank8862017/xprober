// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: prober.proto

package pb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the worker_name.
type ProberTargetsGetRequest struct {
	LocalRegion          string   `protobuf:"bytes,1,opt,name=local_region,json=localRegion,proto3" json:"local_region,omitempty"`
	LocalIp              string   `protobuf:"bytes,2,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProberTargetsGetRequest) Reset()         { *m = ProberTargetsGetRequest{} }
func (m *ProberTargetsGetRequest) String() string { return proto.CompactTextString(m) }
func (*ProberTargetsGetRequest) ProtoMessage()    {}
func (*ProberTargetsGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_802a4ee07f8d018d, []int{0}
}
func (m *ProberTargetsGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProberTargetsGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProberTargetsGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProberTargetsGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProberTargetsGetRequest.Merge(m, src)
}
func (m *ProberTargetsGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProberTargetsGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProberTargetsGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProberTargetsGetRequest proto.InternalMessageInfo

func (m *ProberTargetsGetRequest) GetLocalRegion() string {
	if m != nil {
		return m.LocalRegion
	}
	return ""
}

func (m *ProberTargetsGetRequest) GetLocalIp() string {
	if m != nil {
		return m.LocalIp
	}
	return ""
}

// Targets
type Targets struct {
	ProberType           string   `protobuf:"bytes,1,opt,name=prober_type,json=proberType,proto3" json:"prober_type,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Target               []string `protobuf:"bytes,3,rep,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Targets) Reset()         { *m = Targets{} }
func (m *Targets) String() string { return proto.CompactTextString(m) }
func (*Targets) ProtoMessage()    {}
func (*Targets) Descriptor() ([]byte, []int) {
	return fileDescriptor_802a4ee07f8d018d, []int{1}
}
func (m *Targets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Targets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Targets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Targets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Targets.Merge(m, src)
}
func (m *Targets) XXX_Size() int {
	return m.Size()
}
func (m *Targets) XXX_DiscardUnknown() {
	xxx_messageInfo_Targets.DiscardUnknown(m)
}

var xxx_messageInfo_Targets proto.InternalMessageInfo

func (m *Targets) GetProberType() string {
	if m != nil {
		return m.ProberType
	}
	return ""
}

func (m *Targets) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Targets) GetTarget() []string {
	if m != nil {
		return m.Target
	}
	return nil
}

// The response message containing the ProberTargets
type ProberTargetsGetResponse struct {
	Targets              []*Targets `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProberTargetsGetResponse) Reset()         { *m = ProberTargetsGetResponse{} }
func (m *ProberTargetsGetResponse) String() string { return proto.CompactTextString(m) }
func (*ProberTargetsGetResponse) ProtoMessage()    {}
func (*ProberTargetsGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_802a4ee07f8d018d, []int{2}
}
func (m *ProberTargetsGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProberTargetsGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProberTargetsGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProberTargetsGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProberTargetsGetResponse.Merge(m, src)
}
func (m *ProberTargetsGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProberTargetsGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProberTargetsGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProberTargetsGetResponse proto.InternalMessageInfo

func (m *ProberTargetsGetResponse) GetTargets() []*Targets {
	if m != nil {
		return m.Targets
	}
	return nil
}

// The request message of proberesult
type ProberResultPushRequest struct {
	ProberResults        []*ProberResultOne `protobuf:"bytes,1,rep,name=prober_results,json=proberResults,proto3" json:"prober_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ProberResultPushRequest) Reset()         { *m = ProberResultPushRequest{} }
func (m *ProberResultPushRequest) String() string { return proto.CompactTextString(m) }
func (*ProberResultPushRequest) ProtoMessage()    {}
func (*ProberResultPushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_802a4ee07f8d018d, []int{3}
}
func (m *ProberResultPushRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProberResultPushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProberResultPushRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProberResultPushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProberResultPushRequest.Merge(m, src)
}
func (m *ProberResultPushRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProberResultPushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProberResultPushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProberResultPushRequest proto.InternalMessageInfo

func (m *ProberResultPushRequest) GetProberResults() []*ProberResultOne {
	if m != nil {
		return m.ProberResults
	}
	return nil
}

// ProberResultOne
type ProberResultOne struct {
	WorkerName           string   `protobuf:"bytes,1,opt,name=worker_name,json=workerName,proto3" json:"worker_name,omitempty"`
	MetricName           string   `protobuf:"bytes,2,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	TargetAddr           string   `protobuf:"bytes,3,opt,name=target_addr,json=targetAddr,proto3" json:"target_addr,omitempty"`
	SourceRegion         string   `protobuf:"bytes,4,opt,name=source_region,json=sourceRegion,proto3" json:"source_region,omitempty"`
	TargetRegion         string   `protobuf:"bytes,5,opt,name=target_region,json=targetRegion,proto3" json:"target_region,omitempty"`
	ProbeType            string   `protobuf:"bytes,6,opt,name=probe_type,json=probeType,proto3" json:"probe_type,omitempty"`
	TimeStamp            int64    `protobuf:"varint,7,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	Value                float32  `protobuf:"fixed32,8,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProberResultOne) Reset()         { *m = ProberResultOne{} }
func (m *ProberResultOne) String() string { return proto.CompactTextString(m) }
func (*ProberResultOne) ProtoMessage()    {}
func (*ProberResultOne) Descriptor() ([]byte, []int) {
	return fileDescriptor_802a4ee07f8d018d, []int{4}
}
func (m *ProberResultOne) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProberResultOne) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProberResultOne.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProberResultOne) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProberResultOne.Merge(m, src)
}
func (m *ProberResultOne) XXX_Size() int {
	return m.Size()
}
func (m *ProberResultOne) XXX_DiscardUnknown() {
	xxx_messageInfo_ProberResultOne.DiscardUnknown(m)
}

var xxx_messageInfo_ProberResultOne proto.InternalMessageInfo

func (m *ProberResultOne) GetWorkerName() string {
	if m != nil {
		return m.WorkerName
	}
	return ""
}

func (m *ProberResultOne) GetMetricName() string {
	if m != nil {
		return m.MetricName
	}
	return ""
}

func (m *ProberResultOne) GetTargetAddr() string {
	if m != nil {
		return m.TargetAddr
	}
	return ""
}

func (m *ProberResultOne) GetSourceRegion() string {
	if m != nil {
		return m.SourceRegion
	}
	return ""
}

func (m *ProberResultOne) GetTargetRegion() string {
	if m != nil {
		return m.TargetRegion
	}
	return ""
}

func (m *ProberResultOne) GetProbeType() string {
	if m != nil {
		return m.ProbeType
	}
	return ""
}

func (m *ProberResultOne) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *ProberResultOne) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ProberResultPushResponse struct {
	SuccessNum           int32    `protobuf:"varint,1,opt,name=success_num,json=successNum,proto3" json:"success_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProberResultPushResponse) Reset()         { *m = ProberResultPushResponse{} }
func (m *ProberResultPushResponse) String() string { return proto.CompactTextString(m) }
func (*ProberResultPushResponse) ProtoMessage()    {}
func (*ProberResultPushResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_802a4ee07f8d018d, []int{5}
}
func (m *ProberResultPushResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProberResultPushResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProberResultPushResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProberResultPushResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProberResultPushResponse.Merge(m, src)
}
func (m *ProberResultPushResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProberResultPushResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProberResultPushResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProberResultPushResponse proto.InternalMessageInfo

func (m *ProberResultPushResponse) GetSuccessNum() int32 {
	if m != nil {
		return m.SuccessNum
	}
	return 0
}

// ProberAgentIpReport
type ProberAgentIpReportRequest struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProberAgentIpReportRequest) Reset()         { *m = ProberAgentIpReportRequest{} }
func (m *ProberAgentIpReportRequest) String() string { return proto.CompactTextString(m) }
func (*ProberAgentIpReportRequest) ProtoMessage()    {}
func (*ProberAgentIpReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_802a4ee07f8d018d, []int{6}
}
func (m *ProberAgentIpReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProberAgentIpReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProberAgentIpReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProberAgentIpReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProberAgentIpReportRequest.Merge(m, src)
}
func (m *ProberAgentIpReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProberAgentIpReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProberAgentIpReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProberAgentIpReportRequest proto.InternalMessageInfo

func (m *ProberAgentIpReportRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ProberAgentIpReportRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type ProberAgentIpReportResponse struct {
	IsSuccess            bool     `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProberAgentIpReportResponse) Reset()         { *m = ProberAgentIpReportResponse{} }
func (m *ProberAgentIpReportResponse) String() string { return proto.CompactTextString(m) }
func (*ProberAgentIpReportResponse) ProtoMessage()    {}
func (*ProberAgentIpReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_802a4ee07f8d018d, []int{7}
}
func (m *ProberAgentIpReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProberAgentIpReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProberAgentIpReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProberAgentIpReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProberAgentIpReportResponse.Merge(m, src)
}
func (m *ProberAgentIpReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProberAgentIpReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProberAgentIpReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProberAgentIpReportResponse proto.InternalMessageInfo

func (m *ProberAgentIpReportResponse) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func init() {
	proto.RegisterType((*ProberTargetsGetRequest)(nil), "pb.ProberTargetsGetRequest")
	proto.RegisterType((*Targets)(nil), "pb.Targets")
	proto.RegisterType((*ProberTargetsGetResponse)(nil), "pb.ProberTargetsGetResponse")
	proto.RegisterType((*ProberResultPushRequest)(nil), "pb.ProberResultPushRequest")
	proto.RegisterType((*ProberResultOne)(nil), "pb.ProberResultOne")
	proto.RegisterType((*ProberResultPushResponse)(nil), "pb.ProberResultPushResponse")
	proto.RegisterType((*ProberAgentIpReportRequest)(nil), "pb.ProberAgentIpReportRequest")
	proto.RegisterType((*ProberAgentIpReportResponse)(nil), "pb.ProberAgentIpReportResponse")
}

func init() { proto.RegisterFile("prober.proto", fileDescriptor_802a4ee07f8d018d) }

var fileDescriptor_802a4ee07f8d018d = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x63, 0x87, 0xfc, 0x9b, 0x24, 0x6d, 0xd8, 0x56, 0x60, 0x52, 0xf2, 0x87, 0xad, 0x90,
	0x72, 0xca, 0x21, 0xdc, 0x80, 0x4b, 0x10, 0x52, 0xd5, 0x4b, 0x1b, 0x6d, 0x8b, 0x10, 0x5c, 0x2c,
	0x27, 0x59, 0x05, 0x8b, 0xd8, 0x5e, 0x76, 0xd7, 0xa0, 0xbe, 0x06, 0x27, 0x1e, 0x89, 0x23, 0x8f,
	0x80, 0xc2, 0x8b, 0x20, 0xef, 0xac, 0x5b, 0x37, 0x49, 0x8f, 0xfb, 0xdb, 0xcf, 0xdf, 0xcc, 0x7e,
	0x33, 0x09, 0xb4, 0x84, 0x4c, 0xe6, 0x5c, 0x8e, 0x85, 0x4c, 0x74, 0x42, 0x5c, 0x31, 0xa7, 0x1f,
	0xe1, 0xe9, 0xcc, 0xb0, 0xeb, 0x40, 0xae, 0xb8, 0x56, 0x67, 0x5c, 0x33, 0xfe, 0x2d, 0xe5, 0x4a,
	0x93, 0x17, 0xd0, 0x5a, 0x27, 0x8b, 0x60, 0xed, 0x4b, 0xbe, 0x0a, 0x93, 0xd8, 0x73, 0x86, 0xce,
	0xa8, 0xc1, 0x9a, 0x86, 0x31, 0x83, 0xc8, 0x33, 0xa8, 0xa3, 0x24, 0x14, 0x9e, 0x6b, 0xae, 0x6b,
	0xe6, 0x7c, 0x2e, 0xe8, 0x67, 0xa8, 0x59, 0x4b, 0x32, 0x80, 0x26, 0xd6, 0xf5, 0xf5, 0x8d, 0xe0,
	0xd6, 0x07, 0x10, 0x5d, 0xdf, 0x08, 0x4e, 0x9e, 0x40, 0xd5, 0xd6, 0x40, 0x13, 0x7b, 0xca, 0xb8,
	0x36, 0x1e, 0x5e, 0x79, 0x58, 0xce, 0x38, 0x9e, 0xe8, 0x14, 0xbc, 0xdd, 0xa6, 0x95, 0x48, 0x62,
	0xc5, 0xc9, 0x4b, 0xa8, 0xa1, 0x4a, 0x79, 0xce, 0xb0, 0x3c, 0x6a, 0x4e, 0x9a, 0x63, 0x31, 0x1f,
	0x5b, 0x21, 0xcb, 0xef, 0xe8, 0x87, 0xfc, 0xdd, 0x8c, 0xab, 0x74, 0xad, 0x67, 0xa9, 0xfa, 0x92,
	0xbf, 0xfb, 0x35, 0x1c, 0xd8, 0x76, 0xa5, 0xb9, 0xcb, 0x8d, 0x8e, 0x32, 0xa3, 0xe2, 0x47, 0x97,
	0x31, 0x67, 0x6d, 0x51, 0x00, 0x8a, 0xfe, 0x74, 0xe1, 0x70, 0x4b, 0x92, 0x3d, 0xff, 0x47, 0x22,
	0xbf, 0x72, 0xe9, 0xc7, 0x41, 0x74, 0xfb, 0x7c, 0x44, 0x17, 0x41, 0x64, 0x04, 0x11, 0xd7, 0x32,
	0x5c, 0xa0, 0x00, 0x33, 0x00, 0x44, 0xb9, 0x00, 0xfb, 0xf6, 0x83, 0xe5, 0x52, 0x7a, 0x65, 0x14,
	0x20, 0x9a, 0x2e, 0x97, 0x92, 0x9c, 0x42, 0x5b, 0x25, 0xa9, 0x5c, 0xf0, 0x7c, 0x56, 0x8f, 0x8c,
	0xa4, 0x85, 0xd0, 0x0e, 0xeb, 0x14, 0xda, 0xd6, 0xc5, 0x8a, 0x2a, 0x28, 0x42, 0x68, 0x45, 0x3d,
	0xc0, 0xc1, 0xe0, 0xa8, 0xaa, 0x46, 0xd1, 0x30, 0xc4, 0x4c, 0xaa, 0x07, 0xa0, 0xc3, 0x88, 0xfb,
	0x4a, 0x07, 0x91, 0xf0, 0x6a, 0x43, 0x67, 0x54, 0x66, 0x8d, 0x8c, 0x5c, 0x65, 0x80, 0x1c, 0x43,
	0xe5, 0x7b, 0xb0, 0x4e, 0xb9, 0x57, 0x1f, 0x3a, 0x23, 0x97, 0xe1, 0x81, 0xbe, 0xc9, 0xc7, 0x55,
	0xcc, 0xda, 0x8e, 0x6b, 0x00, 0x4d, 0x95, 0x2e, 0x16, 0x5c, 0x29, 0x3f, 0x4e, 0x23, 0x13, 0x4e,
	0x85, 0x81, 0x45, 0x17, 0x69, 0x44, 0xdf, 0x43, 0x17, 0x3f, 0x9e, 0xae, 0x78, 0xac, 0xcf, 0x05,
	0xe3, 0x22, 0x91, 0xb7, 0x3b, 0x7a, 0x00, 0x6e, 0x28, 0x6c, 0xa4, 0x6e, 0x28, 0x1e, 0xda, 0x24,
	0xfa, 0x16, 0x4e, 0xf6, 0xba, 0xd8, 0x2e, 0x7a, 0x00, 0xa1, 0xf2, 0x6d, 0x55, 0x63, 0x57, 0x67,
	0x8d, 0x50, 0x5d, 0x21, 0x98, 0xcc, 0xe1, 0xf0, 0x8c, 0xeb, 0xe2, 0xca, 0x91, 0x4b, 0xe8, 0x6c,
	0x21, 0x45, 0x4e, 0xee, 0x16, 0x64, 0xe7, 0xd7, 0xd4, 0x7d, 0xbe, 0xff, 0x12, 0x1b, 0xa0, 0xa5,
	0xc9, 0x12, 0x3a, 0x59, 0x30, 0xc5, 0xa0, 0xc8, 0x0c, 0x1e, 0x6f, 0xb3, 0x7b, 0x55, 0x76, 0x76,
	0xb7, 0x58, 0x65, 0x37, 0x6c, 0x5a, 0x9a, 0x08, 0x38, 0xda, 0x93, 0x03, 0xf9, 0x04, 0xc7, 0x7b,
	0xb0, 0x22, 0xfd, 0x3b, 0xbb, 0x7d, 0xf1, 0x77, 0x07, 0x0f, 0xde, 0xe7, 0x15, 0xdf, 0x75, 0x7e,
	0x6f, 0xfa, 0xce, 0x9f, 0x4d, 0xdf, 0xf9, 0xbb, 0xe9, 0x3b, 0xbf, 0xfe, 0xf5, 0x4b, 0xf3, 0xaa,
	0xf9, 0xf7, 0x79, 0xf5, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x20, 0x62, 0x33, 0x1a, 0x8d, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GetProberTargetClient is the client API for GetProberTarget service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetProberTargetClient interface {
	// Sends Get ProberTargets request
	GetProberTargets(ctx context.Context, in *ProberTargetsGetRequest, opts ...grpc.CallOption) (*ProberTargetsGetResponse, error)
}

type getProberTargetClient struct {
	cc *grpc.ClientConn
}

func NewGetProberTargetClient(cc *grpc.ClientConn) GetProberTargetClient {
	return &getProberTargetClient{cc}
}

func (c *getProberTargetClient) GetProberTargets(ctx context.Context, in *ProberTargetsGetRequest, opts ...grpc.CallOption) (*ProberTargetsGetResponse, error) {
	out := new(ProberTargetsGetResponse)
	err := c.cc.Invoke(ctx, "/pb.GetProberTarget/GetProberTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetProberTargetServer is the server API for GetProberTarget service.
type GetProberTargetServer interface {
	// Sends Get ProberTargets request
	GetProberTargets(context.Context, *ProberTargetsGetRequest) (*ProberTargetsGetResponse, error)
}

// UnimplementedGetProberTargetServer can be embedded to have forward compatible implementations.
type UnimplementedGetProberTargetServer struct {
}

func (*UnimplementedGetProberTargetServer) GetProberTargets(ctx context.Context, req *ProberTargetsGetRequest) (*ProberTargetsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProberTargets not implemented")
}

func RegisterGetProberTargetServer(s *grpc.Server, srv GetProberTargetServer) {
	s.RegisterService(&_GetProberTarget_serviceDesc, srv)
}

func _GetProberTarget_GetProberTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProberTargetsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetProberTargetServer).GetProberTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GetProberTarget/GetProberTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetProberTargetServer).GetProberTargets(ctx, req.(*ProberTargetsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetProberTarget_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GetProberTarget",
	HandlerType: (*GetProberTargetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProberTargets",
			Handler:    _GetProberTarget_GetProberTargets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prober.proto",
}

// PushProberResultClient is the client API for PushProberResult service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushProberResultClient interface {
	// Sends Get ProberTargets request
	PushProberResults(ctx context.Context, in *ProberResultPushRequest, opts ...grpc.CallOption) (*ProberResultPushResponse, error)
}

type pushProberResultClient struct {
	cc *grpc.ClientConn
}

func NewPushProberResultClient(cc *grpc.ClientConn) PushProberResultClient {
	return &pushProberResultClient{cc}
}

func (c *pushProberResultClient) PushProberResults(ctx context.Context, in *ProberResultPushRequest, opts ...grpc.CallOption) (*ProberResultPushResponse, error) {
	out := new(ProberResultPushResponse)
	err := c.cc.Invoke(ctx, "/pb.PushProberResult/PushProberResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushProberResultServer is the server API for PushProberResult service.
type PushProberResultServer interface {
	// Sends Get ProberTargets request
	PushProberResults(context.Context, *ProberResultPushRequest) (*ProberResultPushResponse, error)
}

// UnimplementedPushProberResultServer can be embedded to have forward compatible implementations.
type UnimplementedPushProberResultServer struct {
}

func (*UnimplementedPushProberResultServer) PushProberResults(ctx context.Context, req *ProberResultPushRequest) (*ProberResultPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushProberResults not implemented")
}

func RegisterPushProberResultServer(s *grpc.Server, srv PushProberResultServer) {
	s.RegisterService(&_PushProberResult_serviceDesc, srv)
}

func _PushProberResult_PushProberResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProberResultPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushProberResultServer).PushProberResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PushProberResult/PushProberResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushProberResultServer).PushProberResults(ctx, req.(*ProberResultPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PushProberResult_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PushProberResult",
	HandlerType: (*PushProberResultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushProberResults",
			Handler:    _PushProberResult_PushProberResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prober.proto",
}

// ProberAgentIpReportClient is the client API for ProberAgentIpReport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProberAgentIpReportClient interface {
	// Sends Get ProberTargets request
	ProberAgentIpReports(ctx context.Context, in *ProberAgentIpReportRequest, opts ...grpc.CallOption) (*ProberAgentIpReportResponse, error)
}

type proberAgentIpReportClient struct {
	cc *grpc.ClientConn
}

func NewProberAgentIpReportClient(cc *grpc.ClientConn) ProberAgentIpReportClient {
	return &proberAgentIpReportClient{cc}
}

func (c *proberAgentIpReportClient) ProberAgentIpReports(ctx context.Context, in *ProberAgentIpReportRequest, opts ...grpc.CallOption) (*ProberAgentIpReportResponse, error) {
	out := new(ProberAgentIpReportResponse)
	err := c.cc.Invoke(ctx, "/pb.ProberAgentIpReport/ProberAgentIpReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProberAgentIpReportServer is the server API for ProberAgentIpReport service.
type ProberAgentIpReportServer interface {
	// Sends Get ProberTargets request
	ProberAgentIpReports(context.Context, *ProberAgentIpReportRequest) (*ProberAgentIpReportResponse, error)
}

// UnimplementedProberAgentIpReportServer can be embedded to have forward compatible implementations.
type UnimplementedProberAgentIpReportServer struct {
}

func (*UnimplementedProberAgentIpReportServer) ProberAgentIpReports(ctx context.Context, req *ProberAgentIpReportRequest) (*ProberAgentIpReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProberAgentIpReports not implemented")
}

func RegisterProberAgentIpReportServer(s *grpc.Server, srv ProberAgentIpReportServer) {
	s.RegisterService(&_ProberAgentIpReport_serviceDesc, srv)
}

func _ProberAgentIpReport_ProberAgentIpReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProberAgentIpReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProberAgentIpReportServer).ProberAgentIpReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProberAgentIpReport/ProberAgentIpReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProberAgentIpReportServer).ProberAgentIpReports(ctx, req.(*ProberAgentIpReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProberAgentIpReport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProberAgentIpReport",
	HandlerType: (*ProberAgentIpReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProberAgentIpReports",
			Handler:    _ProberAgentIpReport_ProberAgentIpReports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prober.proto",
}

func (m *ProberTargetsGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProberTargetsGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProberTargetsGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LocalIp) > 0 {
		i -= len(m.LocalIp)
		copy(dAtA[i:], m.LocalIp)
		i = encodeVarintProber(dAtA, i, uint64(len(m.LocalIp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LocalRegion) > 0 {
		i -= len(m.LocalRegion)
		copy(dAtA[i:], m.LocalRegion)
		i = encodeVarintProber(dAtA, i, uint64(len(m.LocalRegion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Targets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Targets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Targets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Target) > 0 {
		for iNdEx := len(m.Target) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Target[iNdEx])
			copy(dAtA[i:], m.Target[iNdEx])
			i = encodeVarintProber(dAtA, i, uint64(len(m.Target[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintProber(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProberType) > 0 {
		i -= len(m.ProberType)
		copy(dAtA[i:], m.ProberType)
		i = encodeVarintProber(dAtA, i, uint64(len(m.ProberType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProberTargetsGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProberTargetsGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProberTargetsGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Targets) > 0 {
		for iNdEx := len(m.Targets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Targets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProber(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProberResultPushRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProberResultPushRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProberResultPushRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProberResults) > 0 {
		for iNdEx := len(m.ProberResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProberResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProber(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProberResultOne) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProberResultOne) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProberResultOne) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i--
		dAtA[i] = 0x45
	}
	if m.TimeStamp != 0 {
		i = encodeVarintProber(dAtA, i, uint64(m.TimeStamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ProbeType) > 0 {
		i -= len(m.ProbeType)
		copy(dAtA[i:], m.ProbeType)
		i = encodeVarintProber(dAtA, i, uint64(len(m.ProbeType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TargetRegion) > 0 {
		i -= len(m.TargetRegion)
		copy(dAtA[i:], m.TargetRegion)
		i = encodeVarintProber(dAtA, i, uint64(len(m.TargetRegion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SourceRegion) > 0 {
		i -= len(m.SourceRegion)
		copy(dAtA[i:], m.SourceRegion)
		i = encodeVarintProber(dAtA, i, uint64(len(m.SourceRegion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetAddr) > 0 {
		i -= len(m.TargetAddr)
		copy(dAtA[i:], m.TargetAddr)
		i = encodeVarintProber(dAtA, i, uint64(len(m.TargetAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetricName) > 0 {
		i -= len(m.MetricName)
		copy(dAtA[i:], m.MetricName)
		i = encodeVarintProber(dAtA, i, uint64(len(m.MetricName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkerName) > 0 {
		i -= len(m.WorkerName)
		copy(dAtA[i:], m.WorkerName)
		i = encodeVarintProber(dAtA, i, uint64(len(m.WorkerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProberResultPushResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProberResultPushResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProberResultPushResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SuccessNum != 0 {
		i = encodeVarintProber(dAtA, i, uint64(m.SuccessNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProberAgentIpReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProberAgentIpReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProberAgentIpReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintProber(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintProber(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProberAgentIpReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProberAgentIpReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProberAgentIpReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProber(dAtA []byte, offset int, v uint64) int {
	offset -= sovProber(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProberTargetsGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocalRegion)
	if l > 0 {
		n += 1 + l + sovProber(uint64(l))
	}
	l = len(m.LocalIp)
	if l > 0 {
		n += 1 + l + sovProber(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Targets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProberType)
	if l > 0 {
		n += 1 + l + sovProber(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovProber(uint64(l))
	}
	if len(m.Target) > 0 {
		for _, s := range m.Target {
			l = len(s)
			n += 1 + l + sovProber(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProberTargetsGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovProber(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProberResultPushRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProberResults) > 0 {
		for _, e := range m.ProberResults {
			l = e.Size()
			n += 1 + l + sovProber(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProberResultOne) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkerName)
	if l > 0 {
		n += 1 + l + sovProber(uint64(l))
	}
	l = len(m.MetricName)
	if l > 0 {
		n += 1 + l + sovProber(uint64(l))
	}
	l = len(m.TargetAddr)
	if l > 0 {
		n += 1 + l + sovProber(uint64(l))
	}
	l = len(m.SourceRegion)
	if l > 0 {
		n += 1 + l + sovProber(uint64(l))
	}
	l = len(m.TargetRegion)
	if l > 0 {
		n += 1 + l + sovProber(uint64(l))
	}
	l = len(m.ProbeType)
	if l > 0 {
		n += 1 + l + sovProber(uint64(l))
	}
	if m.TimeStamp != 0 {
		n += 1 + sovProber(uint64(m.TimeStamp))
	}
	if m.Value != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProberResultPushResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SuccessNum != 0 {
		n += 1 + sovProber(uint64(m.SuccessNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProberAgentIpReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovProber(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovProber(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProberAgentIpReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSuccess {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProber(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProber(x uint64) (n int) {
	return sovProber(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProberTargetsGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProber
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProberTargetsGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProberTargetsGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProber(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Targets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProber
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Targets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Targets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProberType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProberType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProber(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProberTargetsGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProber
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProberTargetsGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProberTargetsGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, &Targets{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProber(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProberResultPushRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProber
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProberResultPushRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProberResultPushRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProberResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProberResults = append(m.ProberResults, &ProberResultOne{})
			if err := m.ProberResults[len(m.ProberResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProber(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProberResultOne) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProber
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProberResultOne: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProberResultOne: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetricName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipProber(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProberResultPushResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProber
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProberResultPushResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProberResultPushResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessNum", wireType)
			}
			m.SuccessNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProber(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProberAgentIpReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProber
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProberAgentIpReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProberAgentIpReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProber
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProber(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProberAgentIpReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProber
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProberAgentIpReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProberAgentIpReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProber(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProber
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProber(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProber
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProber
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProber
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProber
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProber
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProber
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProber        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProber          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProber = fmt.Errorf("proto: unexpected end of group")
)
